{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 動的 Web サイトのスクレイピング"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Yahoo news のトピックス一覧から、記事のタイトルを抜き出すことができた次は、EDINET を例にとりましょう。\n",
    "\n",
    "EDINET で有価証券報告書を見れる会社の沿革が書いてある HTML 文書を保存しようと思います。\n",
    "\n",
    "1. まず下準備として、[EDINET](http://disclosure.edinet-fsa.go.jp/) のサイトにアクセスします。\n",
    "2. `書類検索` をクリックします。\n",
    "3. 画面左の `全文検索` をクリックします。\n",
    "4. 文字列に `沿革` と入力します。\n",
    "5. 書類情報を指定するのところで、`書類種別を指定する` をクリックします。`有価証券報告書` にチェックをします。\n",
    "6. `書類の目次範囲を指定する` をクリックし、大分類の最初の項を選択し、小分類の最初の項を選択します。\n",
    "7. 検索をクリックします。\n",
    "\n",
    "新しいページが開いたら、そのページの URL をコピーします。\n",
    "URL は次のようになるでしょう。\n",
    "\n",
    "ここが、今回のスタート地点です。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "url = 'https://disclosure.edinet-fsa.go.jp/E01EW/BLMainController.jsp?uji.verb=W1E63031Search&uji.bean=ee.bean.W1E63030.EEW1E63031Bean&PID=W1E63030&TID=W1E63031&SESSIONKEY=1505008790454&stype=0&dcdSelect=12001&hcdSelect=01001&ycdSelect=03001400&tsbSdt=&kbn=1&lgKbn=2&pkbn=0&skbn=1&dskb=&askb=&dflg=0&iflg=0&preId=1&chr=%E6%B2%BF%E9%9D%A9&hbn=true&spf5=2&otd=12001&hcd=01001&ycd=03001400&sec=&scc=&snm=&spf1=1&spf2=1&iec=&icc=&inm=&spf3=1&fdc=&fnm=&spf4=1&cal=1&era=H&yer=&mon=&psr=1&pid=4'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![](image/EDINET.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "このページでは、有価証券報告書が企業別に並んでいます。\n",
    "それでは、最初の `KISCO株式会社` の有価証券報告書をクリックしてみましょう。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![](image/EDINET_window.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "小さなウインドウが新たに開きました。\n",
    "\n",
    "このサイトは、クリックするとページの一部分が開いたり、新しいウインドウが開いたりしています。\n",
    "これは、 `JavaScript` という言語によるものです。ユーザーがページをクリックするなどによって、ページの内容が変わるような Web サイトを **動的 Web サイト** と呼びます。一方、最初から全てのコンテンツがページに表示されているものは **静的 Web サイト** と呼びます。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Selenium"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "動的 Web サイトをスクレイピングするには、`JavaScript` に対処しなければいけません。ここでは、 `Selenium` を使いましょう。Selenium は元は自動テスト用に作られたもので、ブラウザ上のコンテンツをクリックする、検索バーにキーを入力するなどを自動で行ってくれます。\n",
    "\n",
    "まず、Google Chrome のブラウザを自動で動かすドライバーを[ここから](https://sites.google.com/a/chromium.org/chromedriver/downloads)ダウンロードします。ダウンロードしたら、参照しやすい場所に置いておきます。\n",
    "\n",
    "また、`pip install selenium` で selenium の python 用モジュールをインストールしておいてください。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ブラウザを立ち上げます。アラートが出る場合は、`続行` を押してください。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from selenium import webdriver\n",
    "browser = webdriver.Chrome()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "次の作業に移る前に、少し待ちましょう。\n",
    "すぐに次の作業に移ってしまうと、まだコンテンツが出ていないのに作業を行ってしまい、エラーが起こりやすくなります。`implicitly_wait` で指定した秒まで、要素が出るまで待ちます。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "browser.implicitly_wait(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "先程の URL にアクセスします。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "browser.get(url)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "サイトのタイトルが　`EDINET` であることを `assert` を使って確かめます。\n",
    "違う場合はエラーが返ってきます。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "assert 'EDINET' in browser.title"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Selenium でも CSS セレクタが使えます。まずは、有価証券報告書のリンクをクリックします。\n",
    "有価証券報告書、企業名は sytle_pb_after というクラスの要素の中の a 要素にあることがわかります。 `find_elements_by_css_selector` は指定した要素のリストを返します。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![](image/EDINET_report.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "links = browser.find_elements_by_css_selector('.table_border_1 > a')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "リストは、A 社の有価証券報告書、A 社の企業名、B 社の有価証券報告書、B 社の企業名、... 、\n",
    "という順番になっています。\n",
    "最初のリンクをクリックする前に、クリックする企業名を保存しておきます。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'ＫＩＳＣＯ株式会社'"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "company_name = links[1].text\n",
    "company_name"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`click` を使うと、マウスのクリックをしたことになります。\n",
    "KISCO 株式会社の有価証券報告書を指定してから、クリックをしてみます。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "links[0].click()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "新しいウインドウが出ましたね。新しいウインドウに移るには、`switch_to_window` を使います。\n",
    "`browser.window_handles` はウインドウのリストで、古いウインドウから順にリストに入っています。\n",
    "新しいウインドウは 1 番目の要素ですので、こちらに切り替えます。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "new_window = browser.window_handles[1]\n",
    "browser.switch_to_window(new_window)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "新しいウインドウに切り替わったので、沿革を表示させるために、左側の適当な場所をクリックしたいです。\n",
    "\n",
    "とりあえず `a` 要素をとってくれば良い気がしますが、ちょっと待ってください。\n",
    "このサイトでは `frame` 要素が使われているようです。frame 要素は現在の HTML の規格（HTML5) には廃止されましたが、それ以前に作られたサイトでは使っているものもあるようですね。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![](image/EDINET_frame.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "html は各 frame に入っているので、いうなれば、Web ページが frame 毎に分割されているようなものです。ウインドウを移動したように、各 frame に移動しないと、内部の html を参照することができません。\n",
    "\n",
    "実際に、`a` 要素をとってきても何も指定されません。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "browser.find_elements_by_css_selector('a')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`switch_to_frame` を使って frame 間を移動します。\n",
    "\n",
    "このページでは、まず上部と下部で frame が分かれています。\n",
    "クリックしたいのは、下部なので、下部の frame 名 `viewFrame` を指定して、移動します。\n",
    "\n",
    "さらに、下部の frame は左上、左下、右側の 3 つに分かれています。\n",
    "左下の frame 名 `menuFrame2` を指定して、左下に移動します。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "browser.switch_to_frame(\"viewFrame\")\n",
    "browser.switch_to_frame(\"menuFrame2\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`a` 要素を指定して、0番目（表紙）以外をクリックします。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "browser.find_elements_by_css_selector('a')[1].click()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "無事に企業情報が出てきました。\n",
    "今度は右側の frame に移りたいので、一旦元に戻ってから、右側に移動していきます。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "browser.switch_to.default_content()\n",
    "browser.switch_to_frame(\"viewFrame\")\n",
    "browser.switch_to_frame(\"mainFrame\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "各情報は style_pb_after というクラスの要素に入っているので、セレクタで指定します。\n",
    "沿革はその中の 2 番目です。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "enkaku = browser.find_elements_by_css_selector('.style_pb_after')[2]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "沿革かどうか一応確かめましょう。`h3` 要素を指定して、`text` を確認します。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "assert '沿革' in enkaku.find_element_by_css_selector('h3').text"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "要素に入っている HTML をとるには、`get_attribute` を使い、`innerHTML` を取り出します。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "enkaku_html = enkaku.get_attribute(\"innerHTML\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "辞書に保存しておきましょう。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "enkaku_dict = {}\n",
    "enkaku_dict[company_name] = enkaku_html"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "これで、JavaScript のあるサイトから無事 HTML を取り出すことができました！\n",
    "後は、BeautifulSoup などを使って Yahoo news でやったことと同じようにパースするだけです。\n",
    "\n",
    "このように、`Selenium` を使えば、動的 Web サイトから情報を取り出すことも可能です。"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
